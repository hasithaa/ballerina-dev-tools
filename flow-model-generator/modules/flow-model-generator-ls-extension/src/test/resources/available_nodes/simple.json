{
  "description": "A simple example of a package",
  "parentNodeKind": "IF",
  "branchLabel": "THEN",
  "categories": [
    {
      "metadata": {
        "label": "Flow",
        "description": "Flow control nodes",
        "keywords": [
          "Core",
          "Control",
          "Flow"
        ]
      },
      "items": [
        {
          "metadata": {
            "label": "Branch",
            "description": "Branching nodes"
          },
          "items": [
            {
              "metadata": {
                "label": "If",
                "description": "Add conditional branch to the integration flow."
              },
              "codedata": {
                "node": "IF"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "Iteration",
            "description": "Iteration nodes"
          },
          "items": [
            {
              "metadata": {
                "label": "While",
                "description": "Loop over a block of code."
              },
              "codedata": {
                "node": "WHILE"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "Break",
                "description": "Exit the current loop"
              },
              "codedata": {
                "node": "BREAK"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "Continue",
                "description": "Skip the current iteration and continue with the next one"
              },
              "codedata": {
                "node": "CONTINUE"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "Control",
            "description": "Control nodes"
          },
          "items": [
            {
              "metadata": {
                "label": "Return",
                "description": "Return a value"
              },
              "codedata": {
                "node": "RETURN"
              },
              "enabled": true
            }
          ]
        }
      ]
    },
    {
      "metadata": {
        "label": "Data",
        "description": "Data nodes are used to create, read, update, delete, and transform data"
      },
      "items": [
        {
          "metadata": {
            "label": "NewData",
            "description": "Create new variable"
          },
          "codedata": {
            "node": "NEW_DATA"
          },
          "enabled": true
        },
        {
          "metadata": {
            "label": "UpdateData",
            "description": "Update the value of a variable"
          },
          "codedata": {
            "node": "UPDATE_DATA"
          },
          "enabled": true
        }
      ]
    },
    {
      "metadata": {
        "label": "Error Handling",
        "description": "Handle errors that occur during execution"
      },
      "items": [
        {
          "metadata": {
            "label": "ErrorHandler",
            "description": "Catch and handle errors"
          },
          "codedata": {
            "node": "ERROR_HANDLER"
          },
          "enabled": true
        },
        {
          "metadata": {
            "label": "Panic",
            "description": "Panic and stop the execution"
          },
          "codedata": {
            "node": "PANIC"
          },
          "enabled": true
        }
      ]
    },
    {
      "metadata": {
        "label": "Concurrency",
        "description": "Concurrency nodes"
      },
      "items": [
        {
          "metadata": {
            "label": "Transaction",
            "description": "Handle transaction."
          },
          "codedata": {
            "node": "TRANSACTION"
          },
          "enabled": true
        },
        {
          "metadata": {
            "label": "Lock",
            "description": "Allow to access mutable states safely"
          },
          "codedata": {
            "node": "LOCK"
          },
          "enabled": true
        }
      ]
    },
    {
      "metadata": {
        "label": "Network"
      },
      "items": [
        {
          "metadata": {
            "label": "HTTP Connection",
            "description": "The HTTP client provides the capability for initiating contact with a remote HTTP service. The API it\nprovides includes the functions for the standard HTTP methods forwarding a received request and sending requests\nusing custom HTTP verbs.\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "post",
                "description": "The `Client.post()` function can be used to send HTTP POST requests to HTTP endpoints.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "post"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "put",
                "description": "The `Client.put()` function can be used to send HTTP PUT requests to HTTP endpoints.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "put"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "patch",
                "description": "The `Client.patch()` function can be used to send HTTP PATCH requests to HTTP endpoints.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "patch"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "delete",
                "description": "The `Client.delete()` function can be used to send HTTP DELETE requests to HTTP endpoints.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "delete"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "head",
                "description": "The `Client.head()` function can be used to send HTTP HEAD requests to HTTP endpoints.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "head"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "get",
                "description": "The `Client.get()` function can be used to send HTTP GET requests to HTTP endpoints.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "get"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "options",
                "description": "The `Client.options()` function can be used to send HTTP OPTIONS requests to HTTP endpoints.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "options"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "execute",
                "description": "Invokes an HTTP call with the specified HTTP verb.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "execute"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "forward",
                "description": "The `Client.forward()` function can be used to invoke an HTTP call with inbound request's HTTP verb\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "forward"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "submit",
                "description": "Submits an HTTP request to a service with the specified HTTP verb.\nThe `Client->submit()` function does not give out a `http:Response` as the result.\nRather it returns an `http:HttpFuture` which can be used to do further interactions with the endpoint.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "submit"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "getResponse",
                "description": "This just pass the request to actual network call.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "getResponse"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hasPromise",
                "description": "This just pass the request to actual network call.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "hasPromise"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "getNextPromise",
                "description": "This just pass the request to actual network call.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "getNextPromise"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "getPromisedResponse",
                "description": "Passes the request to an actual network call.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "getPromisedResponse"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "rejectPromise",
                "description": "This just pass the request to actual network call.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "http",
                "object": "Client",
                "symbol": "rejectPromise"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "GraphQL Connection",
            "description": "The Ballerina GraphQL client that can be used to communicate with GraphQL APIs.\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerina",
                "module": "graphql",
                "object": "Client",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "executeWithType",
                "description": "Executes a GraphQL document and data binds the GraphQL response to a record with data and extensions\nwhich is a subtype of GenericResponse.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "graphql",
                "object": "Client",
                "symbol": "executeWithType"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "execute",
                "description": "Executes a GraphQL document and data binds the GraphQL response to a record with data, extensions and errors\nwhich is a subtype of GenericResponseWithErrors.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "graphql",
                "object": "Client",
                "symbol": "execute"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "gRPC Connection",
            "description": "The base client used in the generated client code to provide the capability for initiating the contact and executing remote calls with a remote gRPC service.\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerina",
                "module": "grpc",
                "object": "Client",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "executeSimpleRPC",
                "description": "Calls when executing a unary gRPC service.\n```ballerina\n[anydata, map<string|string[]>]|grpc:Error result = grpcClient->executeSimpleRPC(\"HelloWorld/hello\", req, headers);\n```\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "grpc",
                "object": "Client",
                "symbol": "executeSimpleRPC"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "executeServerStreaming",
                "description": "Calls when executing a server streaming call with a gRPC service.\n```ballerina\n[stream<anydata, grpc:Error?>, map<string|string[]>]|grpc:Error result = grpcClient->executeServerStreaming(\"HelloWorld/hello\", req, headers);\n```\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "grpc",
                "object": "Client",
                "symbol": "executeServerStreaming"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "executeClientStreaming",
                "description": "Calls when executing a client streaming call with a gRPC service.\n```ballerina\ngrpc:StreamingClient|grpc:Error result = grpcClient->executeClientStreaming(\"HelloWorld/hello\", headers);\n```\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "grpc",
                "object": "Client",
                "symbol": "executeClientStreaming"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "executeBidirectionalStreaming",
                "description": "Calls when executing a bi-directional streaming call with a gRPC service.\n```ballerina\ngrpc:StreamingClient|grpc:Error result = grpcClient->executeBidirectionalStreaming(\"HelloWorld/hello\", headers);\n```\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "grpc",
                "object": "Client",
                "symbol": "executeBidirectionalStreaming"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "gRPC Streaming Connection",
            "description": "The base client used in the generated client code to provide the gRPC streaming client actions for\ninteracting  with the gRPC server.\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerina",
                "module": "grpc",
                "object": "StreamingClient",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "send",
                "description": "Sends the request message to the server.\n```ballerina\ngrpc:Error? err = sClient->send(message);\n```\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "grpc",
                "object": "StreamingClient",
                "symbol": "send"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "complete",
                "description": "Informs the server when the caller has sent all the messages.\n```ballerina\ngrpc:Error? result = sClient->complete();\n```\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "grpc",
                "object": "StreamingClient",
                "symbol": "complete"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sendError",
                "description": "Sends an error message to the server.\n```ballerina\ngrpc:Error? result = sClient->sendError(error grpc:AbortedError(\"Operation aborted\"));\n```\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "grpc",
                "object": "StreamingClient",
                "symbol": "sendError"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "receive",
                "description": "Receives server responses in client streaming and bidirectional streaming.\n```ballerina\n[anydata, map<string|string[]>]|grpc:Error? result = streamingClient->receive();\n```\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "grpc",
                "object": "StreamingClient",
                "symbol": "receive"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "WebSocket Connection",
            "description": "Represents a WebSocket synchronous client endpoint.\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "writeTextMessage",
                "description": "Writes text messages to the connection. If an error occurs while sending the text message to the connection, that message\nwill be lost.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "writeTextMessage"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "writeBinaryMessage",
                "description": "Writes binary data to the connection. If an error occurs while sending the binary message to the connection,\nthat message will be lost.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "writeBinaryMessage"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "ping",
                "description": "Pings the connection. If an error occurs while sending the ping frame to the server, that frame will be lost.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "ping"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "pong",
                "description": "Sends a pong message to the connection. If an error occurs while sending the pong frame to the connection, that\nthe frame will be lost.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "pong"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "close",
                "description": "Closes the connection.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "close"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "readTextMessage",
                "description": "Reads text messages in a synchronous manner.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "readTextMessage"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "readBinaryMessage",
                "description": "Reads binary data in a synchronous manner.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "readBinaryMessage"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "readMessage",
                "description": "Reads data from the WebSocket connection.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "readMessage"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "writeMessage",
                "description": "Writes messages to the connection. If an error occurs while sending the message to the connection, that message\nwill be lost.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerina",
                "module": "websocket",
                "object": "Client",
                "symbol": "writeMessage"
              },
              "enabled": true
            }
          ]
        }
      ]
    },
    {
      "metadata": {
        "label": "Databases"
      },
      "items": [
        {
          "metadata": {
            "label": "MySQL",
            "description": "Represents a MySQL database client.\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerinax",
                "module": "mysql",
                "object": "Client",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "query",
                "description": "Executes the query, which may return multiple results.\nWhen processing the stream, make sure to consume all fetched data or close the stream.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mysql",
                "object": "Client",
                "symbol": "query"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "queryRow",
                "description": "Executes the query, which is expected to return at most one row of the result.\nIf the query does not return any results, `sql:NoRowsError` is returned.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mysql",
                "object": "Client",
                "symbol": "queryRow"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "execute",
                "description": "Executes the SQL query. Only the metadata of the execution is returned (not the results from the query).\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mysql",
                "object": "Client",
                "symbol": "execute"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "batchExecute",
                "description": "Executes an SQL query with multiple sets of parameters in a batch. Only the metadata of the execution is returned (not results from the query).\nIf one of the commands in the batch fails (except syntax error), the `sql:BatchExecuteError` will be deferred until the remaining commands are completed.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mysql",
                "object": "Client",
                "symbol": "batchExecute"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "call",
                "description": "Executes an SQL query, which calls a stored procedure. This may or may not return results.\nOnce the results are processed, invoke the `close` method on the `sql:ProcedureCallResult`.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mysql",
                "object": "Client",
                "symbol": "call"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "Redis",
            "description": "Ballerina Redis connector provides the capability to access Redis cache.\nThis connector lets you to perform operations to access and manipulate key-value data stored in a Redis database. \n\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "append",
                "description": "Append a value to a key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "append"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "bitCount",
                "description": "Count set bits in a string.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "bitCount"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "bitOpAnd",
                "description": "Perform bitwise AND between strings.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "bitOpAnd"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "bitOpOr",
                "description": "Perform bitwise OR between strings.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "bitOpOr"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "bitOpNot",
                "description": "Perform bitwise NOT on a string.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "bitOpNot"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "bitOpXor",
                "description": "Perform bitwise XOR between strings.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "bitOpXor"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "decr",
                "description": "Decrement integer value of a key by one.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "decr"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "decrBy",
                "description": "Decrement integer value of a key by the given number.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "decrBy"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "getBit",
                "description": "Returns bit value at offset in the string value stored at key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "getBit"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "getRange",
                "description": "Get substring of string stored at a key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "getRange"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "getSet",
                "description": "Set string value of key and return its existing value.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "getSet"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "get",
                "description": "Get value of key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "get"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "incr",
                "description": "Increment integer value of a key by one.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "incr"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "incrBy",
                "description": "Increment integer value of key by the given amount.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "incrBy"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "incrByFloat",
                "description": "Increment integer value of key by the given float.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "incrByFloat"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "mGet",
                "description": "Get values of all given keys.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "mGet"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "mSet",
                "description": "Set multiple keys to multiple values.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "mSet"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "mSetNx",
                "description": "Set multiple keys to multiple values, only if none of the keys exist.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "mSetNx"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "pSetEx",
                "description": "Set value and expiration in milliseconds of a key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "pSetEx"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "set",
                "description": "Set the value of a key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "set"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "setBit",
                "description": "Sets or clears the bit at offset in the string value stored at key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "setBit"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "setEx",
                "description": "Set the value and expiration of a key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "setEx"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "setNx",
                "description": "Set value of a key, only if key does not exist.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "setNx"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "setRange",
                "description": "Overwrite part of string at key starting at the specified offset.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "setRange"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "strLen",
                "description": "Get length of value stored in a key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "strLen"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lPush",
                "description": "Prepend one or multiple values to list.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lPush"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lPop",
                "description": "Remove and get the first element in a list.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lPop"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lPushX",
                "description": "Prepend one or multiple values to a list, only if the list exists.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lPushX"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "bLPop",
                "description": "Remove and get the first element in a list, or block until one is available.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "bLPop"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "bRPop",
                "description": "Remove and get the last element in a list, or block until one is available.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "bRPop"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lIndex",
                "description": "Get an element from list by its index.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lIndex"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lInsert",
                "description": "Insert an element before or after another element in a list.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lInsert"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lLen",
                "description": "Get length of a list.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lLen"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lRange",
                "description": "Get a range of elements from a list.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lRange"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lRem",
                "description": "Remove elements from list.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lRem"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lSet",
                "description": "Set the value of an element in a list by its index.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lSet"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "lTrim",
                "description": "Trim list to the specified range.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "lTrim"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "rPop",
                "description": "Remove and get the last element in a list.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "rPop"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "rPopLPush",
                "description": "Remove the last element in a list, append it to another list and return it.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "rPopLPush"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "rPush",
                "description": "Append one or multiple values to a list.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "rPush"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "rPushX",
                "description": "Append one or multiple values to a list, only if the list exists.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "rPushX"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sAdd",
                "description": "Add one or more members to a set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sAdd"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sCard",
                "description": "Get the number of members in a set\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sCard"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sDiff",
                "description": "Return set resulting from the difference between the first set and all the successive sets\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sDiff"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sDiffStore",
                "description": "Obtain the set resulting from the difference between the first set and all the successive.\nsets and store at the provided destination.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sDiffStore"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sInter",
                "description": "Return the intersection of the provided sets.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sInter"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sInterStore",
                "description": "Obtain the intersection of the provided sets and store at the provided destination.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sInterStore"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sIsMember",
                "description": "Determine if a given value is a member of a set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sIsMember"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sMembers",
                "description": "Get all members in a set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sMembers"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sMove",
                "description": "Move a member from one set to another.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sMove"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sPop",
                "description": "Remove and return a random member from a set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sPop"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sRandMember",
                "description": "Get one or multiple random members from a set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sRandMember"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sRem",
                "description": "Remove one or more members from a set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sRem"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sUnion",
                "description": "Return the union of multiple sets.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sUnion"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sUnionStore",
                "description": "Return the union of multiple sets.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sUnionStore"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zAdd",
                "description": "Add one or more members to a sorted set, or update its score if it already exist.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zAdd"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zCard",
                "description": "Get the number of members in a sorted set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zCard"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zCount",
                "description": "Count the members in a sorted set with scores within the given range.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zCount"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zIncrBy",
                "description": "Increment the score of a member in a sorted set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zIncrBy"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zInterStore",
                "description": "Intersect multiple sorted sets and store the resulting sorted set in a new key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zInterStore"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zLexCount",
                "description": "Count the members in a sorted set within the given lexicographical range.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zLexCount"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRange",
                "description": "Return a range of members in a sorted set, by index.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRange"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRangeByLex",
                "description": "Return a range of members in a sorted set, by lexicographical range from lowest to highest.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRangeByLex"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRevRangeByLex",
                "description": "Return a range of members in a sorted set, by lexicographical range ordered from highest to\nlowest.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRevRangeByLex"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRangeByScore",
                "description": "Return a range of members in a sorted set, by score from lowest to highest.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRangeByScore"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRank",
                "description": "Determine index of a member in a sorted set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRank"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRem",
                "description": "Remove one or more members from a sorted set\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRem"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRemRangeByLex",
                "description": "Remove all members in a sorted set between the given lexicographical range.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRemRangeByLex"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRemRangeByRank",
                "description": "Remove all members in a sorted set within the given indices.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRemRangeByRank"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRemRangeByScore",
                "description": "Remove all members in a sorted set within the given scores.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRemRangeByScore"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRevRange",
                "description": "Return a range of members in a sorted set, by index, ordered highest to lowest.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRevRange"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRevRangeByScore",
                "description": "Return a range of members in a sorted set, by score from highest to lowest.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRevRangeByScore"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zRevRank",
                "description": "Determine the index of a member in a sorted set\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zRevRank"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zScore",
                "description": "Determine the score of a member in a sorted set\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zScore"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "zUnionStore",
                "description": "Return the union of multiple sorted sets\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "zUnionStore"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hDel",
                "description": "Delete one or more hash fields.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hDel"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hExists",
                "description": "Determine if a hash field exists.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hExists"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hGet",
                "description": "Get the value of a hash field.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hGet"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hGetAll",
                "description": "Get the all values of a hash.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hGetAll"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hIncrBy",
                "description": "Increment the integer value of a hash field by the given number.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hIncrBy"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hIncrByFloat",
                "description": "Increment the float value of a hash field by the given number.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hIncrByFloat"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hKeys",
                "description": "Get all the fields in a hash.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hKeys"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hLen",
                "description": "Get the number of fields in a hash.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hLen"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hMGet",
                "description": "Get the values of all the given hash fields.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hMGet"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hMSet",
                "description": "Set multiple hash fields to multiple values.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hMSet"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hSet",
                "description": "Set the string value of a hash field.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hSet"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hSetNx",
                "description": "Set the string value of a hash field, only if the field does not exist.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hSetNx"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hStrLen",
                "description": "Get the string length of the field value in a hash.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hStrLen"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "hVals",
                "description": "Get all the values in a hash.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "hVals"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "del",
                "description": "Delete one or more keys.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "del"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "exists",
                "description": "Determine how many keys exist.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "exists"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "expire",
                "description": "Set a key's time to live in seconds.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "expire"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "keys",
                "description": "Find all keys matching the given pattern.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "keys"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "move",
                "description": "Move a key to another database.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "move"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "persist",
                "description": "Remove the expiration from a key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "persist"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "pExpire",
                "description": "Set a key's time to live in milliseconds.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "pExpire"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "pTtl",
                "description": "Get the time to live for a key in milliseconds.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "pTtl"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "randomKey",
                "description": "Return a random key from the keyspace.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "randomKey"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "rename",
                "description": "Rename a key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "rename"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "renameNx",
                "description": "Rename a key, only if the new key does not exist.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "renameNx"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "sort",
                "description": "Sort elements in a list, set or sorted set.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "sort"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "ttl",
                "description": "Get the time to live for a key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "ttl"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "redisType",
                "description": "Determine the type stored at key.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "redisType"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "clusterInfo",
                "description": "Retrieve information and statistics about the cluster observed by the current node.\nThis command is exclusively available in cluster mode. If the connection is in a non-clustered mode,\nthe API will return a `redis:Error`. Other errors will also be appropriately handled.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "clusterInfo"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "ping",
                "description": "Ping the server.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "ping"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "auth",
                "description": "Authenticate to the server.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "auth"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "echo",
                "description": "Echo the given string.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "redis",
                "object": "Client",
                "symbol": "echo"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "MS SQL",
            "description": "Represents an MSSQL database client.\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerinax",
                "module": "mssql",
                "object": "Client",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "query",
                "description": "Executes the query, which may return multiple results.\nWhen processing the stream, make sure to consume all fetched data or close the stream.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mssql",
                "object": "Client",
                "symbol": "query"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "queryRow",
                "description": "Executes the query, which is expected to return at most one row of the result.\nIf the query does not return any results, an `sql:NoRowsError` is returned.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mssql",
                "object": "Client",
                "symbol": "queryRow"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "execute",
                "description": "Executes the SQL query. Only the metadata of the execution is returned (not the results from the query).\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mssql",
                "object": "Client",
                "symbol": "execute"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "batchExecute",
                "description": "Executes an SQL query with multiple sets of parameters in a batch. Only the metadata of the execution is\nreturned (not results from the query). If one of the commands in the batch fails (except syntax error),\nthe `sql:BatchExecuteError` will be deferred until the remaining commands are completed.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mssql",
                "object": "Client",
                "symbol": "batchExecute"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "call",
                "description": "Executes an SQL query, which calls a stored procedure. This may or may not\nreturn results. Once the results are processed, the `close` method on `sql:ProcedureCallResult` must be called.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mssql",
                "object": "Client",
                "symbol": "call"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "MongoDB",
            "description": "Represents a MongoDB client that can be used to interact with a MongoDB server.\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerinax",
                "module": "mongodb",
                "object": "Client",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "listDatabaseNames",
                "description": "Lists the database names in the MongoDB server.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mongodb",
                "object": "Client",
                "symbol": "listDatabaseNames"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "getDatabase",
                "description": "Retrieves a database from the MongoDB server.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mongodb",
                "object": "Client",
                "symbol": "getDatabase"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "close",
                "description": "Closes the client.\n\n> **Note:** Use a single client instance for the lifetime of the application and close it when the application is done.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "mongodb",
                "object": "Client",
                "symbol": "close"
              },
              "enabled": true
            }
          ]
        },
        {
          "metadata": {
            "label": "PostgreSQL",
            "description": "Represents a PostgreSQL database client.\n"
          },
          "items": [
            {
              "metadata": {
                "label": "New Connection",
                "description": "Create a new connection"
              },
              "codedata": {
                "org": "ballerinax",
                "module": "postgresql",
                "object": "Client",
                "symbol": "init"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "query",
                "description": "Executes the query, which may return multiple results.\nWhen processing the stream, make sure to consume all fetched data or close the stream.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "postgresql",
                "object": "Client",
                "symbol": "query"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "queryRow",
                "description": "Executes the query, which is expected to return at most one row of the result.\nIf the query does not return any results, an `sql:NoRowsError` is returned.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "postgresql",
                "object": "Client",
                "symbol": "queryRow"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "execute",
                "description": "Executes the SQL query. Only the metadata of the execution is returned (not the results from the query).\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "postgresql",
                "object": "Client",
                "symbol": "execute"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "batchExecute",
                "description": "Executes the SQL query with multiple sets of parameters in a batch. Only the metadata of the execution is returned (not results from the query).\nIf one of the commands in the batch fails, the `sql:BatchExecuteError` will be returned immediately.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "postgresql",
                "object": "Client",
                "symbol": "batchExecute"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "call",
                "description": "Executes an SQL query, which calls a stored procedure. This may or may not\nreturn results. Once the results are processed, the `close` method on `sql:ProcedureCallResult` must be called.\n\n"
              },
              "codedata": {
                "node": "ACTION_CALL",
                "org": "ballerinax",
                "module": "postgresql",
                "object": "Client",
                "symbol": "call"
              },
              "enabled": true
            }
          ]
        }
      ]
    }
  ]
}
